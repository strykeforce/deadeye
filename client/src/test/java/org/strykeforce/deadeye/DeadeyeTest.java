/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.strykeforce.deadeye;

import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.networktables.NetworkTableInstance;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class DeadeyeTest {
    private static final NetworkTableInstance nti = NetworkTableInstance.create();

    @BeforeAll
    static void beforeAll() {
        nti.startLocal();
    }

    @AfterAll
    static void afterAll() {
        nti.stopLocal();
        nti.close();
    }


    @Test
    void testId() {
        assertDoesNotThrow(() -> new Deadeye("A0", nti));
        assertDoesNotThrow(() -> new Deadeye("a0", nti));
        assertThrows(IllegalArgumentException.class, () -> new Deadeye("", nti));
        assertThrows(IllegalArgumentException.class, () -> new Deadeye("A", nti));
        assertThrows(IllegalArgumentException.class, () -> new Deadeye("0", nti));
        assertThrows(IllegalArgumentException.class, () -> new Deadeye("A00", nti));
        assertThrows(IllegalArgumentException.class, () -> new Deadeye("A5", nti));

        Deadeye deadeye = new Deadeye("a1", nti);
        assertEquals("A1", deadeye.getId());
    }

    @Test
    void testEnabled() {
        NetworkTable table = nti.getTable(Link.DEADEYE_TABLE + "/Z/0");
        Deadeye deadeye = new Deadeye("Z0", nti);
        assertFalse(table.getEntry("On").getBoolean(false), "On");
        assertFalse(table.getEntry("Off").getBoolean(false), "Off");
        deadeye.setEnabled(true);
        assertTrue(table.getEntry("On").getBoolean(false), "On");
        deadeye.setEnabled(false);
        assertTrue(table.getEntry("Off").getBoolean(true), "Off");
    }

    @Test
    void testLightEnabled() {
        NetworkTable table = nti.getTable(Link.DEADEYE_TABLE + "/Z/0/Light");
        Deadeye deadeye = new Deadeye("Z0", nti);
        assertFalse(table.getEntry("On").getBoolean(false), "On");
        assertFalse(table.getEntry("Off").getBoolean(false), "Off");
        deadeye.setLightEnabled(true);
        assertTrue(table.getEntry("On").getBoolean(false), "On");
        deadeye.setLightEnabled(false);
        assertTrue(table.getEntry("Off").getBoolean(true), "Off");
    }

    @Test
    void hasInfo() {
        Deadeye deadeye = new Deadeye("Z0", nti);
        assertFalse(deadeye.hasInfo());
        NetworkTable table = nti.getTable(Link.DEADEYE_TABLE + "/Z/0");
        table.getEntry("Info").setString("{}");
        assertTrue(deadeye.hasInfo());
    }
}
