# syntax=docker/dockerfile:1

FROM nvcr.io/nvidia/l4t-base:r32.5.0
LABEL maintainer=“jeff@j3ff.io”

WORKDIR /opt/build

ENV DEBIAN_FRONTEND=noninteractive

ARG OPENCV_VERSION="4.5.2"
ARG WPILIB_VERSION="2021.3.1"
ARG FMT_VERSION="7.1.3"
ARG SPDLOG_VERSION="1.8.5"
ARG NLOHMANN_JSON_VERSION="3.9.1"
ARG SAFE_VERSION="1.0.1"
ARG READERWRITERQUEUE_VERSION="1.0.5"
ARG TINYFSM_VERSION="0.3.3"
ARG CATCH2_VERSION="2.13.6"
ARG LIBGPIOD_VERSION="1.4.5"

RUN apt-get update && \
apt-get install -y --no-install-recommends \
    autoconf \
    autoconf-archive \
    automake \
    build-essential \
    ca-certificates \
    cmake \
    curl \
    gfortran \
    git \
    libjpeg8-dev \
    libsystemd-dev \
    libtool \
    pkg-config \
    unzip \
&& rm -rf /var/lib/apt/lists/* \
&& apt-get clean


COPY jetson-ota-public.asc /etc/apt/trusted.gpg.d/jetson-ota-public.asc

RUN echo "deb https://repo.download.nvidia.com/jetson/common r32.5 main" > /etc/apt/sources.list.d/nvidia-l4t-apt-source.list && \
    cat /etc/apt/sources.list.d/nvidia-l4t-apt-source.list && \
    apt-get update && \
    apt-get install -y --no-install-recommends \
            libopencv-dev \
    && rm /etc/apt/sources.list.d/nvidia-l4t-apt-source.list \
    && rm -rf /var/lib/apt/lists/*


RUN wget https://github.com/wpilibsuite/allwpilib/archive/v${WPILIB_VERSION}.zip -O wpilib.zip \
    && unzip wpilib.zip -d /opt \
    && rm -rf wpilib.zip \
    && cmake \
    -D CMAKE_BUILD_TYPE=Release \
    -D CMAKE_INSTALL_PREFIX=/usr/local \
    -D WITH_CSCORE=ON \
    -D WITH_EXAMPLES=OFF \
    -D WITH_FLAT_INSTALL=OFF \
    -D WITH_GUI=OFF \
    -D WITH_JAVA=OFF \
    -D WITH_OLD_COMMANDS=OFF \
    -D WITH_SIMULATION_MODULES=OFF \
    -D WITH_TESTS=OFF \
    -D WITH_WPILIB=OFF \
    -D WITH_WPIMATH=OFF \
    /opt/allwpilib-${WPILIB_VERSION} \
    && make -j$(nproc) \
    && make install \
    && rm -rf /opt/build/* \
    && rm -rf /opt/allwpilib-${WPILIB_VERSION}

RUN wget  https://github.com/fmtlib/fmt/archive/${FMT_VERSION}.zip -O fmt.zip \
    && unzip fmt.zip -d /opt \
    && rm -rf fmt.zip \
    && cmake \
    -D BUILD_SHARED_LIBS=ON \
    -D CMAKE_BUILD_TYPE=Release \
    -D CMAKE_INSTALL_PREFIX=/usr/local \
    -D FMT_DOC=OFF \
    -D FMT_TEST=OFF \
    /opt/fmt-${FMT_VERSION} \
    && make -j$(nproc) \
    && make install \
    && rm -rf /opt/build/* \
    && rm -rf /opt/fmt-${FMT_VERSION}

RUN wget  https://github.com/gabime/spdlog/archive/v${SPDLOG_VERSION}.zip -O spdlog.zip \
    && unzip spdlog.zip -d /opt \
    && rm -rf spdlog.zip \
    && cmake \
    -D CMAKE_BUILD_TYPE=Release \
    -D CMAKE_INSTALL_PREFIX=/usr/local \
    -D SPDLOG_FMT_EXTERNAL=ON \
    /opt/spdlog-${SPDLOG_VERSION} \
    && make -j$(nproc) \
    && make install \
    && rm -rf /opt/build/* \
    && rm -rf /opt/spdlog-${SPDLOG_VERSION}

RUN wget  https://github.com/nlohmann/json/archive/v${NLOHMANN_JSON_VERSION}.zip -O json.zip \
    && unzip json.zip -d /opt \
    && rm -rf json.zip \
    && cmake \
    -D CMAKE_BUILD_TYPE=Release \
    -D CMAKE_INSTALL_PREFIX=/usr/local \
    -D JSON_BuildTests=OFF \
    /opt/json-${NLOHMANN_JSON_VERSION} \
    && make -j$(nproc) \
    && make install \
    && rm -rf /opt/build/* \
    && rm -rf /opt/json-${NLOHMANN_JSON_VERSION}

RUN wget  https://github.com/LouisCharlesC/safe/archive/v${SAFE_VERSION}.zip -O safe.zip \
    && unzip safe.zip -d /opt \
    && rm -rf safe.zip \
    && cmake \
    -D CMAKE_BUILD_TYPE=Release \
    -D CMAKE_INSTALL_PREFIX=/usr/local \
    /opt/safe-${SAFE_VERSION} \
    && make -j$(nproc) \
    && make install \
    && rm -rf /opt/build/* \
    && rm -rf /opt/safe-${SAFE_VERSION}

RUN wget  https://github.com/cameron314/readerwriterqueue/archive/v${READERWRITERQUEUE_VERSION}.zip -O readerwriterqueue.zip \
    && unzip readerwriterqueue.zip -d /opt \
    && rm -rf readerwriterqueue.zip \
    && cmake \
    -D CMAKE_BUILD_TYPE=Release \
    -D CMAKE_INSTALL_PREFIX=/usr/local \
    /opt/readerwriterqueue-${READERWRITERQUEUE_VERSION} \
    && make -j$(nproc) \
    && make install \
    && rm -rf /opt/build/* \
    && rm -rf /opt/readerwriterqueue-${READERWRITERQUEUE_VERSION}

RUN wget  https://github.com/jhh/tinyfsm/archive/v${TINYFSM_VERSION}.zip -O tinyfsm.zip \
    && unzip tinyfsm.zip -d /opt \
    && rm -rf tinyfsm.zip \
    && cmake \
    -D CMAKE_BUILD_TYPE=Release \
    -D CMAKE_INSTALL_PREFIX=/usr/local \
    /opt/tinyfsm-${TINYFSM_VERSION} \
    && make -j$(nproc) \
    && make install \
    && rm -rf /opt/build/* \
    && rm -rf /opt/tinyfsm-${TINYFSM_VERSION}

RUN wget  https://github.com/catchorg/Catch2/archive/v${CATCH2_VERSION}.zip -O catch.zip \
    && unzip catch.zip -d /opt \
    && rm -rf catch.zip \
    && cmake \
    -D CATCH_BUILD_TESTING=OFF \
    -D CATCH_INSTALL_DOCS=OFF \
    -D CMAKE_BUILD_TYPE=Release \
    -D CMAKE_INSTALL_PREFIX=/usr/local \
    /opt/Catch2-${CATCH2_VERSION} \
    && make -j$(nproc) \
    && make install \
    && rm -rf /opt/build/* \
    && rm -rf /opt/Catch2-${CATCH2_VERSION} 

RUN wget https://git.kernel.org/pub/scm/libs/libgpiod/libgpiod.git/snapshot/libgpiod-${LIBGPIOD_VERSION}.tar.gz \
    && tar -C /opt -xzf libgpiod-${LIBGPIOD_VERSION}.tar.gz \
    && rm -f libgpiod-${LIBGPIOD_VERSION}.tar.gz \
    && cd /opt/libgpiod-${LIBGPIOD_VERSION} \
    && ./autogen.sh --enable-tools=no --prefix=/usr/local \
    && make install \
    && cd ./bindings/cxx \
    && make install \
    && /sbin/ldconfig \
    && rm -rf /opt/libgpiod-${LIBGPIOD_VERSION}

